#!/usr/bin/python
"""
Copyright (c) 2002-2003  Gustavo Niemeyer <niemeyer@conectiva.com>

This program allows you to edit moin (see http://moin.sourceforge.net)
pages with your preferred editor. The default editor is vi. If you want
to use any other, just set the EDITOR environment variable.

To define your moin id used when logging in in a specifc moin, edit a
file named ~/.moin_ids and include lines like "http://moin.url/etc myid".

WARNING: This program expects information to be in a very specific
         format. It will break if this format changes, so there are
         no warranties of working at all. All I can say is that it
         worked for me, at least once. ;-)

Tested moin versions: 0.9, 0.11, 1.0, 1.1
"""

__author__ = "Gustavo Niemeyer <niemeyer@conectiva.com>"
__version__ = "1.0"
__license__ = "GPL"

import tempfile
import sys, os
import urllib
import shutil
import md5
import re

USAGE = "Usage: editmoin [-t <template page>] <moin page URL>\n"

# normal
BODYRE = re.compile('<textarea.*?name="savetext".*?>(.*)</textarea>',
                    re.M|re.DOTALL)
DATESTAMPRE = re.compile('<input.*?name="datestamp".*?value="(.*?)".*?>')
NOTIFYRE = re.compile('<input.*?name="notify".*?value="(.*?)".*?>')
MESSAGERE = re.compile('<div class="message">(.*?)</div>', re.M|re.DOTALL)
OLDMESSAGERE = re.compile('^</table>(.*?)<a.*?>Clear message</a>', re.M|re.DOTALL)

CANCELRE = re.compile('<input type="submit" name="button_cancel" value="(.*?)">')

# findall
CATEGORYRE = re.compile('<option value="(Category\w+?)">')

# other
SELECTIONRE = re.compile("\(([^)]*)\)\s*([^(]*)")

class Error(Exception): pass

class MoinFile:
    multi_selection = ["notify", "add_category"]
    def __init__(self, filename, id):
        self.filename = filename
        self.id = id
        self.data = open(filename).read()
        self.body = self._get_data(BODYRE, "body")
        self.datestamp = self._get_data(DATESTAMPRE, "datestamp")
        try:
            self.notify = self._get_data(NOTIFYRE, "notify")
            self.comment = "None"
        except Error:
            self.notify = None
            self.comment = None
        try:
            self.categories = self._get_data_findall(CATEGORYRE, "category")
        except Error:
            self.categories = []
        self.add_category = None

    def _get_data(self, pattern, info):
        match = pattern.search(self.data)
        if not match:
            message = get_message(self.data)
            if message:
                print message
            raise Error, info+" information not found"
        else:
            return match.group(1)

    def _get_data_findall(self, pattern, info):
        groups = pattern.findall(self.data)
        if not groups:
            raise Error, info+" information not found"
        return groups

    def _get_selection(self, str):
        for selected, option in SELECTIONRE.findall(str):
            if selected.strip():
                return option.strip()
        return None

    def _unescape(self, data):
        data = data.replace("&lt;", "<")
        data = data.replace("&gt;", ">")
        data = data.replace("&amp;", "&")
        return data

    def has_cancel(self):
        return (CANCELRE.search(self.data) is not None)

    def write_raw(self):
        filename = tempfile.mktemp(".moin")
        file = open(filename, "w")
        if not self.id:
            file.write("@@ WARNING! You're NOT logged in!\n")
        else:
            file.write("@@ Using ID %s.\n" % self.id)
        if self.notify is not None:
            file.write("@@ Comment: %s\n" % self.comment)
            yes, no = (self.notify and ("x", " ") or (" ", "x"))
            file.write("@@ Notify: (%s) Yes  (%s) No\n" % (yes, no))
        if self.categories:
            file.write("@@ Add category: (x) None\n")
            for category in self.categories:
                file.write("@                ( ) %s\n" % category)
        file.write(self._unescape(self.body))
        file.close()
        return filename

    def read_raw(self, filename):
        file = open(filename)
        lines = []
        data = file.readline()
        while data != "\n":
            if data[0] != "@":
                break
            if len(data) < 2:
                pass
            elif data[1] == "@":
                lines.append(data[2:].strip())
            else:
                lines[-1] += " "
                lines[-1] += data[2:].strip()
            data = file.readline()
        self.body = data+file.read()
        file.close()
        for line in lines:
            sep = line.find(":")   
            if sep != -1:
                attr = line[:sep].lower().replace(' ', '_')
                value = line[sep+1:].strip()
                if attr in self.multi_selection:
                    setattr(self, attr, self._get_selection(value))
                else:
                    setattr(self, attr, value)
 
def get_message(data):
    message = None
    match = MESSAGERE.search(data)
    if not match:
        # Check for moin <= 0.9.
        match = OLDMESSAGERE.search(data)
    if match:
        message = match.group(1)
        message = re.subn("\n", " ", message)[0]
        message = re.subn("<p>|<br>", "\n", message)[0]
        message = re.subn("<.*?>", "", message)[0]
        message = re.subn("Clear message", "", message)[0]
        message = re.subn("[ \t]+", " ", message)[0]
        message = message.strip()
    return message 

def get_id(moinurl):
    idfilename = os.path.expanduser("~/.moin_ids")
    if os.path.isfile(idfilename):
        file = open(idfilename)
        for line in file.readlines():
            url, id = line.split()
            if moinurl.startswith(url):
                return id
    return None

def get_urlopener(moinurl, id=None):
    urlopener = urllib.URLopener()
    proxy = os.environ.get("http_proxy")
    if proxy:
        urlopener.proxies.update({"http": proxy})
    if id:
        urlopener.addheader("Cookie", "MOIN_ID=\"%s\"" % id)
    return urlopener

def fetchfile(urlopener, url, id, template):
    geturl = url+"?action=edit"
    if template:
        geturl += "&template=" + urllib.quote(template)
    filename, headers = urlopener.retrieve(geturl)
    return MoinFile(filename, id)

def editfile(moinfile):
    edited = 0
    filename = moinfile.write_raw()
    editor = os.environ.get("EDITOR", "vi")
    digest = md5.md5(open(filename).read()).digest()
    os.system("%s %s" % (editor, filename))
    if digest != md5.md5(open(filename).read()).digest():
        shutil.copyfile(filename, os.path.expanduser("~/.moin_lastedit"))
        edited = 1
        moinfile.read_raw(filename)
    os.unlink(filename)
    return edited

def sendfile(urlopener, url, moinfile):
    if moinfile.comment is not None:
        comment = "&comment="
        if moinfile.comment.lower() != "none":
            comment += urllib.quote(moinfile.comment)
    else:
        comment = ""
    data = "action=savepage&button_save=1&datestamp=%s&savetext=%s%s" \
           % (moinfile.datestamp, urllib.quote(moinfile.body), comment)
    if moinfile.notify == "Yes":
        data += "&notify=1"
    if moinfile.add_category and moinfile.add_category != "None":
        data += "&category=%s" % urllib.quote(moinfile.add_category)
    url = urlopener.open(url, data)
    answer = url.read()
    url.close()
    message = get_message(answer)
    if message is None:
        print answer
        raise Error, "data submitted, but message information not found"
    else:
        print message

def sendcancel(urlopener, url, moinfile):
    if not moinfile.has_cancel():
        return
    data = "action=savepage&button_cancel=1&datestamp=%s" % moinfile.datestamp
    url = urlopener.open(url, data)
    answer = url.read()
    url.close()
    message = get_message(answer)
    if not message:
        raise Error, "cancel submitted, but message information not found"
    else:
        print message

def main():
    argv = sys.argv[1:]
    template = None
    if len(argv) > 2 and argv[0] == "-t":
        template = argv[1]
        argv = argv[2:]
    if len(argv) != 1:
        sys.stderr.write(USAGE)
        sys.exit(1)
    url = argv[0]
    id = get_id(url)
    urlopener = get_urlopener(url, id)
    try:
        moinfile = fetchfile(urlopener, url, id, template)
        try:
            if editfile(moinfile):
                sendfile(urlopener, url, moinfile)
            else:
                sendcancel(urlopener, url, moinfile)
        finally:
            os.unlink(moinfile.filename)
    except (IOError, OSError, Error), e:
        sys.stderr.write("error: %s\n" % str(e))
        sys.exit(1)

if __name__ == "__main__":
    main()

# vim:et:ts=4:sw=4
